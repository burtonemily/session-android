# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.6)
   message(FATAL_ERROR "CMake >= 2.6.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.6...3.20)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

if(CMAKE_VERSION VERSION_LESS 3.0.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
endif()

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_targetsDefined)
set(_targetsNotDefined)
set(_expectedTargets)
foreach(_expectedTarget libsession::config libsession::crypto libsession::common libsession::version)
  list(APPEND _expectedTargets ${_expectedTarget})
  if(NOT TARGET ${_expectedTarget})
    list(APPEND _targetsNotDefined ${_expectedTarget})
  endif()
  if(TARGET ${_expectedTarget})
    list(APPEND _targetsDefined ${_expectedTarget})
  endif()
endforeach()
if("${_targetsDefined}" STREQUAL "${_expectedTargets}")
  unset(_targetsDefined)
  unset(_targetsNotDefined)
  unset(_expectedTargets)
  set(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT "${_targetsDefined}" STREQUAL "")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_targetsDefined}\nTargets not yet defined: ${_targetsNotDefined}\n")
endif()
unset(_targetsDefined)
unset(_targetsNotDefined)
unset(_expectedTargets)


# Create imported target libsession::config
add_library(libsession::config STATIC IMPORTED)

set_target_properties(libsession::config PROPERTIES
  INTERFACE_LINK_LIBRARIES "libsession::crypto;oxenc::oxenc;libsession::libzstd_static_fixed_includes;libsession::common"
)

# Create imported target libsession::crypto
add_library(libsession::crypto STATIC IMPORTED)

set_target_properties(libsession::crypto PROPERTIES
  INTERFACE_LINK_LIBRARIES "libsodium::sodium-internal;libsession::common"
)

# Create imported target libsession::common
add_library(libsession::common INTERFACE IMPORTED)

set_target_properties(libsession::common PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/Users/emilyburton/Documents/session-android/libsession-util/libsession-util/src/../include"
  INTERFACE_LINK_LIBRARIES "libsession::version"
)

# Create imported target libsession::version
add_library(libsession::version STATIC IMPORTED)

# Import target "libsession::config" for configuration "Release"
set_property(TARGET libsession::config APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(libsession::config PROPERTIES
  IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "C;CXX"
  IMPORTED_LOCATION_RELEASE "/Users/emilyburton/Documents/session-android/libsession-util/.cxx/Debug/6s4d6l27/x86/libsession/src/libsession-util-config.a"
  )

# Import target "libsession::crypto" for configuration "Release"
set_property(TARGET libsession::crypto APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(libsession::crypto PROPERTIES
  IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "CXX"
  IMPORTED_LOCATION_RELEASE "/Users/emilyburton/Documents/session-android/libsession-util/.cxx/Debug/6s4d6l27/x86/libsession/src/libsession-util-crypto.a"
  )

# Import target "libsession::version" for configuration "Release"
set_property(TARGET libsession::version APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(libsession::version PROPERTIES
  IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "C"
  IMPORTED_LOCATION_RELEASE "/Users/emilyburton/Documents/session-android/libsession-util/.cxx/Debug/6s4d6l27/x86/libsession/src/libsession-util-version.a"
  )

# Make sure the targets which have been exported in some other
# export set exist.
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
foreach(_target "oxenc::oxenc" "libsession::libzstd_static_fixed_includes" "libsodium::sodium-internal" )
  if(NOT TARGET "${_target}" )
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets "${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets} ${_target}")
  endif()
endforeach()

if(DEFINED ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
  if(CMAKE_FIND_PACKAGE_NAME)
    set( ${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    set( ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  else()
    message(FATAL_ERROR "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  endif()
endif()
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
